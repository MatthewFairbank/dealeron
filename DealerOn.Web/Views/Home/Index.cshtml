@using DealerOn.Data.Enums
@model DealerOn.Web.Models.SalesTaxViewModel
@{
}
<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>DealerOn - Sales Tax</title>
    <link rel="stylesheet" href="/Content/bootstrap.min.css" />
    <script type="text/javascript" src="/Scripts/jquery-3.2.1.min.js"></script>
    <script type="text/javascript" src="/Scripts/bootstrap.min.js"></script>
</head>
<body>
    <header class="navbar navbar-inverse navbar-fixed-top">
        <nav class="container-fluid">
            <div class="navbar-header">
                <a class="navbar-brand" href="/">
                    DealerOn SalesTax
                </a>
            </div>
        </nav>
    </header>
    <main class="container-fluid">
        <div class="jumbotron">
            <h1 class="page-header">DealerOn Sales Tax Problem Set</h1>
            <p>Begin by entering shopping cart items, separating them by a new line. When ready, click the "Checkout" button and the application will attempt to parse the input. You will then be able to edit the data before creating a final receipt.</p>
        </div>
        <div class="row">
            <div class="col-md-8 col-md-push-2 col-lg-6 col-lg-push-3">
                <form action="/home/index" method="post" class="form-horizontal">
                    <div class="form-group @(Model != null && Model.Errors.Any() ? "has-error" : "")">
                        <label class="col-md-12" for="Input">
                            Shopping Cart Input:
                        </label>
                        <div class="col-md-12">
                            @if (Model != null)
                            {
                                @Html.TextAreaFor(p => p.Input, new { @class = "form-control", rows = 5 })
                            }
                            else
                            {
                                <textarea class="form-control" rows="5" name="Input" Id="Input"></textarea>
                            }
                            @if (Model != null && Model.Errors.Any())
                            {
                                foreach (var error in Model.Errors)
                                {
                                    <span class="help-block">
                                        @error
                                    </span>
                                }

                            }
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-12">
                            <button class="btn btn-default">Cancel</button>
                            <button class="btn btn-primary" type="submit">Checkout</button>
                        </div>
                    </div>
                </form>
                <div style="margin-top: 20px;">
                    @if (Model != null && !Model.Errors.Any() && Model.GroupedProducts.Any())
                    {
                        <div class="list-group">
                            @foreach (var products in Model.GroupedProducts)
                            {
                                if (products.Count() == 1)
                                {
                                    var product = products.First();
                                    <div class="list-group-item">
                                        @if (product.IsImported)
                                        {
                                            <span class="badge">
                                                Import Tax
                                            </span>
                                        }
                                        @if (product.IsTaxExempt)
                                        {
                                            <span class="badge">
                                                Sales Tax Exempt: @product.Type.ToString()
                                            </span>
                                        }
                                        @product.Name: @string.Format("${0:#0.00}", product.Total)
                                    </div>
                                }
                                else
                                {
                                    <div class="list-group-item">
                                        @if (products.First().IsImported)
                                        {
                                            <span class="badge">
                                                Import Tax
                                            </span>
                                        }
                                        @if (products.First().IsTaxExempt)
                                        {
                                            <span class="badge">
                                                Sales Tax Exempt: @products.First().Type.ToString()
                                            </span>
                                        }
                                        @products.First().Name: @string.Format("${0:#0.00}", products.Sum(e => e.Total)) (@products.Count() @@ @string.Format("${0:#0.00}", products.First().Total))
                                    </div>
                                }
                            }
                            <div class="list-group-item">
                                <b>Sales Tax: $@string.Format("{0:#0.00}", Model.SalesTaxTotal)</b>
                            </div>
                            <div class="list-group-item">
                                <b>Total: $@string.Format("{0:#0.00}", Model.Products.Sum(e=>e.Price) + Model.SalesTaxTotal)</b>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </main>
</body>
</html>
